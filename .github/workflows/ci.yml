name: CI

# When to run this workflow
on:
  # Run on every push to any branch
  push:
    branches: ['**']

  # Run on pull requests to main branch
  pull_request:
    branches: [main]

  # Allow manual trigger from GitHub UI
  workflow_dispatch:

# Environment variables available to all jobs
env:
  NODE_ENV: test

jobs:
  # Job 1: Code Quality Checks
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Run ESLint
      - name: Run ESLint
        run: npm run lint

      # Step 5: Check Prettier formatting
      - name: Check Prettier formatting
        run: npm run format:check

  # Job 2: Build Check
  build:
    name: Build TypeScript
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Step: Compile TypeScript
      - name: Build
        run: npm run build

      # Step: Upload build artifacts for inspection
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  # Job 3: Test on Multiple Node.js Versions
  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}

    # Strategy: Test matrix for multiple versions
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node-version: [18, 20, 22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Step: Run tests with coverage
      - name: Run tests with coverage
        run: npm run test:coverage

      # Step: Upload coverage to Codecov (only for Node 20)
      - name: Upload coverage to Codecov
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      # Step: Upload coverage artifact
      - name: Upload coverage artifact
        if: matrix.node-version == 20
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/
          retention-days: 7

  # Job 4: Type Check
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Step: Check types without emitting files
      - name: Type check
        run: npx tsc --noEmit

  # Job 5: Dependency Audit
  audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Step: Check for security vulnerabilities
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

  # Job 6: All Checks Passed (Required Status Check)
  ci-success:
    name: All CI Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, build, test, typecheck]
    if: always()

    steps:
      - name: Check all jobs succeeded
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.typecheck.result }}" != "success" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI checks passed successfully!"
